
lab2new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025cc  080025cc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025d4  080025d4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080025dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000003c  08002618  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002618  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005788  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001119  00000000  00000000  000257f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e0  00000000  00000000  00026910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  00026ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014701  00000000  00000000  00027438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005043  00000000  00000000  0003bb39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080e79  00000000  00000000  00040b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c19f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016dc  00000000  00000000  000c1a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800259c 	.word	0x0800259c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000040 	.word	0x20000040
 80001d4:	0800259c 	.word	0x0800259c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fcfa 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 fa36 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fac8 	bl	8000a78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 fa9c 	bl	8000a24 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ButtonUpdate();
 80004ec:	f000 fb8a 	bl	8000c04 <ButtonUpdate>
	  if(HAL_GetTick()- ti >=300)
 80004f0:	f000 fd56 	bl	8000fa0 <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b96      	ldr	r3, [pc, #600]	; (8000750 <main+0x278>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000500:	f0c0 8203 	bcc.w	800090a <main+0x432>
	  {
		  if (ButtonMatrixState == 1)
 8000504:	4b93      	ldr	r3, [pc, #588]	; (8000754 <main+0x27c>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d118      	bne.n	800053e <main+0x66>
		  {
			  y = 0;
 800050c:	4b92      	ldr	r3, [pc, #584]	; (8000758 <main+0x280>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
			  password[count]=7;
 8000512:	4b92      	ldr	r3, [pc, #584]	; (800075c <main+0x284>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4b91      	ldr	r3, [pc, #580]	; (8000760 <main+0x288>)
 800051a:	2207      	movs	r2, #7
 800051c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 7;
 8000520:	4b90      	ldr	r3, [pc, #576]	; (8000764 <main+0x28c>)
 8000522:	2207      	movs	r2, #7
 8000524:	601a      	str	r2, [r3, #0]
			  count +=1;
 8000526:	4b8d      	ldr	r3, [pc, #564]	; (800075c <main+0x284>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	b29a      	uxth	r2, r3
 800052e:	4b8b      	ldr	r3, [pc, #556]	; (800075c <main+0x284>)
 8000530:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 8000532:	f000 fd35 	bl	8000fa0 <HAL_GetTick>
 8000536:	4602      	mov	r2, r0
 8000538:	4b85      	ldr	r3, [pc, #532]	; (8000750 <main+0x278>)
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e1e5      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b10)
 800053e:	4b85      	ldr	r3, [pc, #532]	; (8000754 <main+0x27c>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d118      	bne.n	8000578 <main+0xa0>
		  {
			  y = 0;
 8000546:	4b84      	ldr	r3, [pc, #528]	; (8000758 <main+0x280>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
			  password[count]=8;
 800054c:	4b83      	ldr	r3, [pc, #524]	; (800075c <main+0x284>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	4b83      	ldr	r3, [pc, #524]	; (8000760 <main+0x288>)
 8000554:	2208      	movs	r2, #8
 8000556:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 8;
 800055a:	4b82      	ldr	r3, [pc, #520]	; (8000764 <main+0x28c>)
 800055c:	2208      	movs	r2, #8
 800055e:	601a      	str	r2, [r3, #0]
			  count +=1;
 8000560:	4b7e      	ldr	r3, [pc, #504]	; (800075c <main+0x284>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b7c      	ldr	r3, [pc, #496]	; (800075c <main+0x284>)
 800056a:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 800056c:	f000 fd18 	bl	8000fa0 <HAL_GetTick>
 8000570:	4602      	mov	r2, r0
 8000572:	4b77      	ldr	r3, [pc, #476]	; (8000750 <main+0x278>)
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	e1c8      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b100)
 8000578:	4b76      	ldr	r3, [pc, #472]	; (8000754 <main+0x27c>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d118      	bne.n	80005b2 <main+0xda>
		  {
			  y = 0;
 8000580:	4b75      	ldr	r3, [pc, #468]	; (8000758 <main+0x280>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
			  password[count]=9;
 8000586:	4b75      	ldr	r3, [pc, #468]	; (800075c <main+0x284>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	4b74      	ldr	r3, [pc, #464]	; (8000760 <main+0x288>)
 800058e:	2209      	movs	r2, #9
 8000590:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 9;
 8000594:	4b73      	ldr	r3, [pc, #460]	; (8000764 <main+0x28c>)
 8000596:	2209      	movs	r2, #9
 8000598:	601a      	str	r2, [r3, #0]
			  count +=1;
 800059a:	4b70      	ldr	r3, [pc, #448]	; (800075c <main+0x284>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b6e      	ldr	r3, [pc, #440]	; (800075c <main+0x284>)
 80005a4:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 80005a6:	f000 fcfb 	bl	8000fa0 <HAL_GetTick>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b68      	ldr	r3, [pc, #416]	; (8000750 <main+0x278>)
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	e1ab      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b10000)
 80005b2:	4b68      	ldr	r3, [pc, #416]	; (8000754 <main+0x27c>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	2b10      	cmp	r3, #16
 80005b8:	d118      	bne.n	80005ec <main+0x114>
		  {
			  y = 0;
 80005ba:	4b67      	ldr	r3, [pc, #412]	; (8000758 <main+0x280>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
			  password[count]=4;
 80005c0:	4b66      	ldr	r3, [pc, #408]	; (800075c <main+0x284>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <main+0x288>)
 80005c8:	2204      	movs	r2, #4
 80005ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 4;
 80005ce:	4b65      	ldr	r3, [pc, #404]	; (8000764 <main+0x28c>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	601a      	str	r2, [r3, #0]
			  count +=1;
 80005d4:	4b61      	ldr	r3, [pc, #388]	; (800075c <main+0x284>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <main+0x284>)
 80005de:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 80005e0:	f000 fcde 	bl	8000fa0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b5a      	ldr	r3, [pc, #360]	; (8000750 <main+0x278>)
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e18e      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b100000)
 80005ec:	4b59      	ldr	r3, [pc, #356]	; (8000754 <main+0x27c>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	2b20      	cmp	r3, #32
 80005f2:	d118      	bne.n	8000626 <main+0x14e>
		  {
			  y = 0;
 80005f4:	4b58      	ldr	r3, [pc, #352]	; (8000758 <main+0x280>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
			  password[count]=5;
 80005fa:	4b58      	ldr	r3, [pc, #352]	; (800075c <main+0x284>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	4b57      	ldr	r3, [pc, #348]	; (8000760 <main+0x288>)
 8000602:	2205      	movs	r2, #5
 8000604:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 5;
 8000608:	4b56      	ldr	r3, [pc, #344]	; (8000764 <main+0x28c>)
 800060a:	2205      	movs	r2, #5
 800060c:	601a      	str	r2, [r3, #0]
			  count +=1;
 800060e:	4b53      	ldr	r3, [pc, #332]	; (800075c <main+0x284>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b51      	ldr	r3, [pc, #324]	; (800075c <main+0x284>)
 8000618:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 800061a:	f000 fcc1 	bl	8000fa0 <HAL_GetTick>
 800061e:	4602      	mov	r2, r0
 8000620:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <main+0x278>)
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	e171      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b1000000)
 8000626:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <main+0x27c>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	2b40      	cmp	r3, #64	; 0x40
 800062c:	d118      	bne.n	8000660 <main+0x188>
		  {
			  y = 0;
 800062e:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <main+0x280>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
			  password[count]=6;
 8000634:	4b49      	ldr	r3, [pc, #292]	; (800075c <main+0x284>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <main+0x288>)
 800063c:	2206      	movs	r2, #6
 800063e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 6;
 8000642:	4b48      	ldr	r3, [pc, #288]	; (8000764 <main+0x28c>)
 8000644:	2206      	movs	r2, #6
 8000646:	601a      	str	r2, [r3, #0]
			  count +=1;
 8000648:	4b44      	ldr	r3, [pc, #272]	; (800075c <main+0x284>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b42      	ldr	r3, [pc, #264]	; (800075c <main+0x284>)
 8000652:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 8000654:	f000 fca4 	bl	8000fa0 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <main+0x278>)
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	e154      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b100000000)
 8000660:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <main+0x27c>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000668:	d118      	bne.n	800069c <main+0x1c4>
		  {
			  y = 0;
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <main+0x280>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
			  password[count]=1;
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <main+0x284>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x288>)
 8000678:	2201      	movs	r2, #1
 800067a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 1;
 800067e:	4b39      	ldr	r3, [pc, #228]	; (8000764 <main+0x28c>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
			  count +=1;
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <main+0x284>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <main+0x284>)
 800068e:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 8000690:	f000 fc86 	bl	8000fa0 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <main+0x278>)
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	e136      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b1000000000)
 800069c:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <main+0x27c>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006a4:	d118      	bne.n	80006d8 <main+0x200>
		  {
			  y = 0;
 80006a6:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <main+0x280>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
			  password[count]=2;
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <main+0x284>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <main+0x288>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 2;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x28c>)
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
			  count +=1;
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <main+0x284>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <main+0x284>)
 80006ca:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 80006cc:	f000 fc68 	bl	8000fa0 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <main+0x278>)
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e118      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b10000000000)
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <main+0x27c>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006e0:	d118      	bne.n	8000714 <main+0x23c>
		  {
			  y = 0;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <main+0x280>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
			  password[count]=3;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <main+0x284>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <main+0x288>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 3;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x28c>)
 80006f8:	2203      	movs	r2, #3
 80006fa:	601a      	str	r2, [r3, #0]
			  count +=1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <main+0x284>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <main+0x284>)
 8000706:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 8000708:	f000 fc4a 	bl	8000fa0 <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <main+0x278>)
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e0fa      	b.n	800090a <main+0x432>
		  }
		  else if (ButtonMatrixState == 0b1000000000000)
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <main+0x27c>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800071c:	d124      	bne.n	8000768 <main+0x290>
		  {
			  y = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <main+0x280>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
			  password[count]=0;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <main+0x284>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <main+0x288>)
 800072c:	2200      	movs	r2, #0
 800072e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  a = 0;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <main+0x28c>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
			  count +=1;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <main+0x284>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <main+0x284>)
 8000742:	801a      	strh	r2, [r3, #0]
			  ti = HAL_GetTick();
 8000744:	f000 fc2c 	bl	8000fa0 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	4b01      	ldr	r3, [pc, #4]	; (8000750 <main+0x278>)
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	e0dc      	b.n	800090a <main+0x432>
 8000750:	20000094 	.word	0x20000094
 8000754:	20000058 	.word	0x20000058
 8000758:	20000060 	.word	0x20000060
 800075c:	20000090 	.word	0x20000090
 8000760:	20000064 	.word	0x20000064
 8000764:	2000005c 	.word	0x2000005c
		  }
		  else if (ButtonMatrixState == 0b1000)
 8000768:	4b72      	ldr	r3, [pc, #456]	; (8000934 <main+0x45c>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b08      	cmp	r3, #8
 800076e:	d132      	bne.n	80007d6 <main+0x2fe>
		  {
			  y=0;
 8000770:	4b71      	ldr	r3, [pc, #452]	; (8000938 <main+0x460>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
			  count = 0;
 8000776:	4b71      	ldr	r3, [pc, #452]	; (800093c <main+0x464>)
 8000778:	2200      	movs	r2, #0
 800077a:	801a      	strh	r2, [r3, #0]
			  password[0]=0;
 800077c:	4b70      	ldr	r3, [pc, #448]	; (8000940 <main+0x468>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			  password[1]=0;
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <main+0x468>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
			  password[2]=0;
 8000788:	4b6d      	ldr	r3, [pc, #436]	; (8000940 <main+0x468>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
			  password[3]=0;
 800078e:	4b6c      	ldr	r3, [pc, #432]	; (8000940 <main+0x468>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
			  password[4]=0;
 8000794:	4b6a      	ldr	r3, [pc, #424]	; (8000940 <main+0x468>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
			  password[5]=0;
 800079a:	4b69      	ldr	r3, [pc, #420]	; (8000940 <main+0x468>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
			  password[6]=0;
 80007a0:	4b67      	ldr	r3, [pc, #412]	; (8000940 <main+0x468>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
			  password[7]=0;
 80007a6:	4b66      	ldr	r3, [pc, #408]	; (8000940 <main+0x468>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
			  password[8]=0;
 80007ac:	4b64      	ldr	r3, [pc, #400]	; (8000940 <main+0x468>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
			  password[9]=0;
 80007b2:	4b63      	ldr	r3, [pc, #396]	; (8000940 <main+0x468>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
			  password[10]=0;
 80007b8:	4b61      	ldr	r3, [pc, #388]	; (8000940 <main+0x468>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
			  password[11]=0;
 80007be:	4b60      	ldr	r3, [pc, #384]	; (8000940 <main+0x468>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
			  a = 0;
 80007c4:	4b5f      	ldr	r3, [pc, #380]	; (8000944 <main+0x46c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
			  ti = HAL_GetTick();
 80007ca:	f000 fbe9 	bl	8000fa0 <HAL_GetTick>
 80007ce:	4602      	mov	r2, r0
 80007d0:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <main+0x470>)
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e099      	b.n	800090a <main+0x432>
		  }

		  else if (ButtonMatrixState == 0b1000000000000000 )
 80007d6:	4b57      	ldr	r3, [pc, #348]	; (8000934 <main+0x45c>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007de:	f040 8094 	bne.w	800090a <main+0x432>
		  {
			  if(password[2]== 0b11 && password[3]== 0b100 && password[4]== 0  )
 80007e2:	4b57      	ldr	r3, [pc, #348]	; (8000940 <main+0x468>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d15b      	bne.n	80008a2 <main+0x3ca>
 80007ea:	4b55      	ldr	r3, [pc, #340]	; (8000940 <main+0x468>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d157      	bne.n	80008a2 <main+0x3ca>
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <main+0x468>)
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d153      	bne.n	80008a2 <main+0x3ca>
			  {
				  if(password[5]== 0b101 &&password[6]== 0 && password[7]== 0 )
 80007fa:	4b51      	ldr	r3, [pc, #324]	; (8000940 <main+0x468>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	2b05      	cmp	r3, #5
 8000800:	f040 8082 	bne.w	8000908 <main+0x430>
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <main+0x468>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d17d      	bne.n	8000908 <main+0x430>
 800080c:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <main+0x468>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d179      	bne.n	8000908 <main+0x430>
				  {
					  if(password[9]== 0b1 && password[10]== 0b100 )
 8000814:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <main+0x468>)
 8000816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000818:	2b01      	cmp	r3, #1
 800081a:	d175      	bne.n	8000908 <main+0x430>
 800081c:	4b48      	ldr	r3, [pc, #288]	; (8000940 <main+0x468>)
 800081e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000820:	2b04      	cmp	r3, #4
 8000822:	d171      	bne.n	8000908 <main+0x430>
					  {
						  if(password[1]== 0b10&& password[0]== 0b110&& password[8]== 0)
 8000824:	4b46      	ldr	r3, [pc, #280]	; (8000940 <main+0x468>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d16d      	bne.n	8000908 <main+0x430>
 800082c:	4b44      	ldr	r3, [pc, #272]	; (8000940 <main+0x468>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b06      	cmp	r3, #6
 8000832:	d169      	bne.n	8000908 <main+0x430>
 8000834:	4b42      	ldr	r3, [pc, #264]	; (8000940 <main+0x468>)
 8000836:	6a1b      	ldr	r3, [r3, #32]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d165      	bne.n	8000908 <main+0x430>
						  {
							   y = 1;
 800083c:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <main+0x460>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
							  a = 0;
 8000842:	4b40      	ldr	r3, [pc, #256]	; (8000944 <main+0x46c>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
							  count =0;
 8000848:	4b3c      	ldr	r3, [pc, #240]	; (800093c <main+0x464>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
							  password[0]=0;
 800084e:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <main+0x468>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
							  password[1]=0;
 8000854:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <main+0x468>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
							  password[2]=0;
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <main+0x468>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
							  password[3]=0;
 8000860:	4b37      	ldr	r3, [pc, #220]	; (8000940 <main+0x468>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
							  password[4]=0;
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <main+0x468>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
							  password[5]=0;
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <main+0x468>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
							  password[6]=0;
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <main+0x468>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
							  password[7]=0;
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <main+0x468>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
							  password[8]=0;
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <main+0x468>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
							  password[9]=0;
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <main+0x468>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
							  password[10]=0;
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <main+0x468>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
							  password[11]=0;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <main+0x468>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
							  ti = HAL_GetTick();
 8000896:	f000 fb83 	bl	8000fa0 <HAL_GetTick>
 800089a:	4602      	mov	r2, r0
 800089c:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <main+0x470>)
 800089e:	601a      	str	r2, [r3, #0]
				  if(password[5]== 0b101 &&password[6]== 0 && password[7]== 0 )
 80008a0:	e032      	b.n	8000908 <main+0x430>
				  }

			  }
			  else
			  {
				  y = 0;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <main+0x460>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
				  a = 0;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <main+0x46c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
				  count =0;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <main+0x464>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]
				  password[0]=0;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <main+0x468>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
				  password[1]=0;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <main+0x468>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
				  password[2]=0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <main+0x468>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
				  password[3]=0;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <main+0x468>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
				  password[4]=0;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <main+0x468>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
				  password[5]=0;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <main+0x468>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
				  password[6]=0;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <main+0x468>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
				  password[7]=0;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <main+0x468>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
				  password[8]=0;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <main+0x468>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
				  password[9]=0;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <main+0x468>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
				  password[10]=0;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <main+0x468>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
				  password[11]=0;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <main+0x468>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
				  ti = HAL_GetTick();
 80008fc:	f000 fb50 	bl	8000fa0 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <main+0x470>)
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e000      	b.n	800090a <main+0x432>
				  if(password[5]== 0b101 &&password[6]== 0 && password[7]== 0 )
 8000908:	bf00      	nop
			  }
		  }
	 }
	 if (y==1)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <main+0x460>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d104      	bne.n	800091c <main+0x444>
	 {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	2120      	movs	r1, #32
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <main+0x474>)
 8000918:	f000 fdce 	bl	80014b8 <HAL_GPIO_WritePin>
	 }
	 if(y == 0 )
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <main+0x460>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	f47f ade3 	bne.w	80004ec <main+0x14>
	 {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <main+0x474>)
 800092c:	f000 fdc4 	bl	80014b8 <HAL_GPIO_WritePin>
	  ButtonUpdate();
 8000930:	e5dc      	b.n	80004ec <main+0x14>
 8000932:	bf00      	nop
 8000934:	20000058 	.word	0x20000058
 8000938:	20000060 	.word	0x20000060
 800093c:	20000090 	.word	0x20000090
 8000940:	20000064 	.word	0x20000064
 8000944:	2000005c 	.word	0x2000005c
 8000948:	20000094 	.word	0x20000094
 800094c:	40020000 	.word	0x40020000

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fe14 	bl	800258c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <SystemClock_Config+0xcc>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <SystemClock_Config+0xcc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <SystemClock_Config+0xd0>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <SystemClock_Config+0xd0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009c0:	2310      	movs	r3, #16
 80009c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fd88 	bl	80014ec <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009e2:	f000 f999 	bl	8000d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 ffe2 	bl	80019cc <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a0e:	f000 f983 	bl	8000d18 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	; 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART2_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f001 f9a8 	bl	8001db0 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f957 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000009c 	.word	0x2000009c
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b57      	ldr	r3, [pc, #348]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a56      	ldr	r2, [pc, #344]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b50      	ldr	r3, [pc, #320]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a4f      	ldr	r2, [pc, #316]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b49      	ldr	r3, [pc, #292]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <MX_GPIO_Init+0x178>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <MX_GPIO_Init+0x17c>)
 8000b04:	f000 fcd8 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000b0e:	4839      	ldr	r0, [pc, #228]	; (8000bf4 <MX_GPIO_Init+0x17c>)
 8000b10:	f000 fcd2 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4837      	ldr	r0, [pc, #220]	; (8000bf8 <MX_GPIO_Init+0x180>)
 8000b1a:	f000 fccd 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4836      	ldr	r0, [pc, #216]	; (8000bfc <MX_GPIO_Init+0x184>)
 8000b24:	f000 fcc8 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_GPIO_Init+0x188>)
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x180>)
 8000b3e:	f000 fb21 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b42:	2320      	movs	r3, #32
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <MX_GPIO_Init+0x17c>)
 8000b5a:	f000 fb13 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000b5e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b64:	2311      	movs	r3, #17
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0x17c>)
 8000b78:	f000 fb04 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b80:	2311      	movs	r3, #17
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <MX_GPIO_Init+0x180>)
 8000b94:	f000 faf6 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0x17c>)
 8000bae:	f000 fae9 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bb2:	2338      	movs	r3, #56	; 0x38
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_GPIO_Init+0x184>)
 8000bc6:	f000 fadd 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bce:	2311      	movs	r3, #17
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x184>)
 8000be2:	f000 facf 	bl	8001184 <HAL_GPIO_Init>

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	10210000 	.word	0x10210000

08000c04 <ButtonUpdate>:
GPIO_TypeDef *ButtonmPORT[8] = { GPIOA, GPIOB, GPIOB, GPIOB, GPIOA, GPIOC,
		GPIOB, GPIOA };
uint16_t Bottonpin[8] = { GPIO_PIN_10, GPIO_PIN_3, GPIO_PIN_5, GPIO_PIN_4,
		GPIO_PIN_9, GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7 };
uint8_t ButtonMline = 0;
void ButtonUpdate() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - timestamp >= 50)
 8000c0a:	f000 f9c9 	bl	8000fa0 <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <ButtonUpdate+0x100>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b31      	cmp	r3, #49	; 0x31
 8000c18:	d970      	bls.n	8000cfc <ButtonUpdate+0xf8>
	{
		timestamp = HAL_GetTick();
 8000c1a:	f000 f9c1 	bl	8000fa0 <HAL_GetTick>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <ButtonUpdate+0x100>)
 8000c24:	801a      	strh	r2, [r3, #0]
		int i;
		for (i = 0; i < 4; ++i)
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e037      	b.n	8000c9c <ButtonUpdate+0x98>
		{
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonmPORT[i],
 8000c2c:	4a36      	ldr	r2, [pc, #216]	; (8000d08 <ButtonUpdate+0x104>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <ButtonUpdate+0x108>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f000 fc23 	bl	8001488 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	707b      	strb	r3, [r7, #1]
					Bottonpin[i]);
			if (PinState == GPIO_PIN_RESET)
 8000c46:	787b      	ldrb	r3, [r7, #1]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d111      	bne.n	8000c70 <ButtonUpdate+0x6c>
			{
				ButtonMatrixState |= (uint16_t)0x1 << (i+ButtonMline*4);
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <ButtonUpdate+0x10c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	009a      	lsls	r2, r3, #2
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	2201      	movs	r2, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <ButtonUpdate+0x110>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <ButtonUpdate+0x110>)
 8000c6c:	801a      	strh	r2, [r3, #0]
 8000c6e:	e012      	b.n	8000c96 <ButtonUpdate+0x92>
			}
			else
			{
				ButtonMatrixState &= ~((uint16_t)0x1 << (i+ButtonMline*4));
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <ButtonUpdate+0x10c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	009a      	lsls	r2, r3, #2
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <ButtonUpdate+0x110>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <ButtonUpdate+0x110>)
 8000c94:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 4; ++i)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	ddc4      	ble.n	8000c2c <ButtonUpdate+0x28>
			}
		}
		uint8_t NowOutputPin = ButtonMline + 4;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <ButtonUpdate+0x10c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ButtonmPORT[NowOutputPin], Bottonpin[NowOutputPin], GPIO_PIN_SET);
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <ButtonUpdate+0x104>)
 8000cae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <ButtonUpdate+0x108>)
 8000cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f000 fbfb 	bl	80014b8 <HAL_GPIO_WritePin>

		ButtonMline = (ButtonMline + 1)%4;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <ButtonUpdate+0x10c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	425a      	negs	r2, r3
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	f002 0203 	and.w	r2, r2, #3
 8000cd2:	bf58      	it	pl
 8000cd4:	4253      	negpl	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <ButtonUpdate+0x10c>)
 8000cda:	701a      	strb	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMline + 4;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <ButtonUpdate+0x10c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	70bb      	strb	r3, [r7, #2]
		HAL_GPIO_WritePin(ButtonmPORT[NextOutputPin], Bottonpin[NextOutputPin], GPIO_PIN_RESET);
 8000ce4:	78bb      	ldrb	r3, [r7, #2]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <ButtonUpdate+0x104>)
 8000ce8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <ButtonUpdate+0x108>)
 8000cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f000 fbde 	bl	80014b8 <HAL_GPIO_WritePin>

	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000005a 	.word	0x2000005a
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000020 	.word	0x20000020
 8000d10:	20000098 	.word	0x20000098
 8000d14:	20000058 	.word	0x20000058

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <Error_Handler+0x6>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 f9dc 	bl	800111c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12b      	bne.n	8000dea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_UART_MspInit+0x88>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_UART_MspInit+0x88>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_UART_MspInit+0x88>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_UART_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_UART_MspInit+0x8c>)
 8000de6:	f000 f9cd 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f894 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <SystemInit+0x28>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <SystemInit+0x28>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SystemInit+0x28>)
 8000e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e86:	e003      	b.n	8000e90 <LoopCopyDataInit>

08000e88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e8e:	3104      	adds	r1, #4

08000e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e98:	d3f6      	bcc.n	8000e88 <CopyDataInit>
  ldr  r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e9c:	e002      	b.n	8000ea4 <LoopFillZerobss>

08000e9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ea0:	f842 3b04 	str.w	r3, [r2], #4

08000ea4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ea6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ea8:	d3f9      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd3 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f001 fb49 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb11 	bl	80004d8 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ebc:	080025dc 	.word	0x080025dc
  ldr  r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ec4:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8000ec8:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 8000ecc:	200000e0 	.word	0x200000e0

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f90d 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff ff0a 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f917 	bl	800116a <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f8ed 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000030 	.word	0x20000030
 8000f70:	20000038 	.word	0x20000038
 8000f74:	20000034 	.word	0x20000034

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000038 	.word	0x20000038
 8000f9c:	200000dc 	.word	0x200000dc

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200000dc 	.word	0x200000dc

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e159      	b.n	8001454 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8148 	bne.w	800144e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d00b      	beq.n	80011de <HAL_GPIO_Init+0x5a>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	2b11      	cmp	r3, #17
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0xfc>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b12      	cmp	r3, #18
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a2 	beq.w	800144e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a55      	ldr	r2, [pc, #340]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x2e8>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x2ec>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x202>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a47      	ldr	r2, [pc, #284]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x1fe>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x1fa>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a45      	ldr	r2, [pc, #276]	; (800147c <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x1f6>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a44      	ldr	r2, [pc, #272]	; (8001480 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x1f2>
 8001372:	2304      	movs	r3, #4
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001376:	2307      	movs	r3, #7
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x204>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x204>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4934      	ldr	r1, [pc, #208]	; (800146c <HAL_GPIO_Init+0x2e8>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a6:	4b37      	ldr	r3, [pc, #220]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ca:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f4:	4a23      	ldr	r2, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x300>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_GPIO_Init+0x300>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_GPIO_Init+0x300>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f aea2 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	3724      	adds	r7, #36	; 0x24
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e25b      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d075      	beq.n	80015f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	4ba3      	ldr	r3, [pc, #652]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b04      	cmp	r3, #4
 8001514:	d00c      	beq.n	8001530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001516:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d112      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b9d      	ldr	r3, [pc, #628]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800152e:	d10b      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d05b      	beq.n	80015f4 <HAL_RCC_OscConfig+0x108>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d157      	bne.n	80015f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e236      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x74>
 8001552:	4b91      	ldr	r3, [pc, #580]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x98>
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a8a      	ldr	r2, [pc, #552]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a87      	ldr	r2, [pc, #540]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a80      	ldr	r2, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcfc 	bl	8000fa0 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcf8 	bl	8000fa0 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1fb      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xc0>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fce8 	bl	8000fa0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fce4 	bl	8000fa0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1e7      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0xe8>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b62      	ldr	r3, [pc, #392]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1bb      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4952      	ldr	r1, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_OscConfig+0x2b0>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fc9d 	bl	8000fa0 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fc99 	bl	8000fa0 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e19c      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4940      	ldr	r1, [pc, #256]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x2b0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc7c 	bl	8000fa0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc78 	bl	8000fa0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e17b      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d030      	beq.n	8001738 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d016      	beq.n	800170c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x2b4>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fc5c 	bl	8000fa0 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc58 	bl	8000fa0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e15b      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x200>
 800170a:	e015      	b.n	8001738 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x2b4>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fc45 	bl	8000fa0 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fc41 	bl	8000fa0 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e144      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a0 	beq.w	8001886 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d121      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178e:	f7ff fc07 	bl	8000fa0 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	e011      	b.n	80017ba <HAL_RCC_OscConfig+0x2ce>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	42470000 	.word	0x42470000
 80017a0:	42470e80 	.word	0x42470e80
 80017a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff fbfa 	bl	8000fa0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0fd      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x4d4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f0>
 80017ce:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x32a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x312>
 80017e4:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a76      	ldr	r2, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	4b74      	ldr	r3, [pc, #464]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a73      	ldr	r2, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x32a>
 80017fe:	4b71      	ldr	r3, [pc, #452]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a70      	ldr	r2, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b6e      	ldr	r3, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a6d      	ldr	r2, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fbbf 	bl	8000fa0 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fbbb 	bl	8000fa0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0bc      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x33a>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fba9 	bl	8000fa0 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fba5 	bl	8000fa0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0a6      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8092 	beq.w	80019b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d05c      	beq.n	8001956 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d141      	bne.n	8001928 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <HAL_RCC_OscConfig+0x4dc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb79 	bl	8000fa0 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fb75 	bl	8000fa0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e078      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	4933      	ldr	r1, [pc, #204]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x4dc>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb4e 	bl	8000fa0 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb4a 	bl	8000fa0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04d      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x41c>
 8001926:	e045      	b.n	80019b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x4dc>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fb37 	bl	8000fa0 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff fb33 	bl	8000fa0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e036      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x44a>
 8001954:	e02e      	b.n	80019b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e029      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_RCC_OscConfig+0x4d8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	429a      	cmp	r2, r3
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d115      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001990:	4293      	cmp	r3, r2
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d106      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470060 	.word	0x42470060

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0cc      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d90c      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d044      	beq.n	8001aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e067      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4934      	ldr	r1, [pc, #208]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff fa70 	bl	8000fa0 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff fa6c 	bl	8000fa0 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e04f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d20c      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f821 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b56:	4601      	mov	r1, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	fa21 f303 	lsr.w	r3, r1, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f9d0 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	080025b4 	.word	0x080025b4
 8001b90:	20000030 	.word	0x20000030
 8001b94:	20000034 	.word	0x20000034

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d007      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x32>
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x38>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80b4 	bne.w	8001d2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bc6:	60bb      	str	r3, [r7, #8]
       break;
 8001bc8:	e0b3      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bcc:	60bb      	str	r3, [r7, #8]
      break;
 8001bce:	e0b0      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04a      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	ea03 0501 	and.w	r5, r3, r1
 8001bfc:	ea04 0602 	and.w	r6, r4, r2
 8001c00:	4629      	mov	r1, r5
 8001c02:	4632      	mov	r2, r6
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	f04f 0400 	mov.w	r4, #0
 8001c0c:	0154      	lsls	r4, r2, #5
 8001c0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c12:	014b      	lsls	r3, r1, #5
 8001c14:	4619      	mov	r1, r3
 8001c16:	4622      	mov	r2, r4
 8001c18:	1b49      	subs	r1, r1, r5
 8001c1a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f04f 0400 	mov.w	r4, #0
 8001c26:	0194      	lsls	r4, r2, #6
 8001c28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c2c:	018b      	lsls	r3, r1, #6
 8001c2e:	1a5b      	subs	r3, r3, r1
 8001c30:	eb64 0402 	sbc.w	r4, r4, r2
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	00e2      	lsls	r2, r4, #3
 8001c3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c42:	00d9      	lsls	r1, r3, #3
 8001c44:	460b      	mov	r3, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	195b      	adds	r3, r3, r5
 8001c4a:	eb44 0406 	adc.w	r4, r4, r6
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	0262      	lsls	r2, r4, #9
 8001c58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c5c:	0259      	lsls	r1, r3, #9
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	4621      	mov	r1, r4
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f04f 0400 	mov.w	r4, #0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	f7fe fab2 	bl	80001d8 <__aeabi_uldivmod>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e049      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	f04f 0400 	mov.w	r4, #0
 8001c86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	ea03 0501 	and.w	r5, r3, r1
 8001c92:	ea04 0602 	and.w	r6, r4, r2
 8001c96:	4629      	mov	r1, r5
 8001c98:	4632      	mov	r2, r6
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f04f 0400 	mov.w	r4, #0
 8001ca2:	0154      	lsls	r4, r2, #5
 8001ca4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca8:	014b      	lsls	r3, r1, #5
 8001caa:	4619      	mov	r1, r3
 8001cac:	4622      	mov	r2, r4
 8001cae:	1b49      	subs	r1, r1, r5
 8001cb0:	eb62 0206 	sbc.w	r2, r2, r6
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	0194      	lsls	r4, r2, #6
 8001cbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cc2:	018b      	lsls	r3, r1, #6
 8001cc4:	1a5b      	subs	r3, r3, r1
 8001cc6:	eb64 0402 	sbc.w	r4, r4, r2
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	00e2      	lsls	r2, r4, #3
 8001cd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cd8:	00d9      	lsls	r1, r3, #3
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	195b      	adds	r3, r3, r5
 8001ce0:	eb44 0406 	adc.w	r4, r4, r6
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	02a2      	lsls	r2, r4, #10
 8001cee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cf2:	0299      	lsls	r1, r3, #10
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f04f 0400 	mov.w	r4, #0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4623      	mov	r3, r4
 8001d06:	f7fe fa67 	bl	80001d8 <__aeabi_uldivmod>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	60bb      	str	r3, [r7, #8]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d2e:	60bb      	str	r3, [r7, #8]
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	68bb      	ldr	r3, [r7, #8]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000030 	.word	0x20000030

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4601      	mov	r1, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	080025c4 	.word	0x080025c4

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffdc 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d90:	4601      	mov	r1, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	080025c4 	.word	0x080025c4

08001db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e03f      	b.n	8001e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe ffca 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f829 	bl	8001e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e8e:	f023 030c 	bic.w	r3, r3, #12
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eba:	f040 818b 	bne.w	80021d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4ac1      	ldr	r2, [pc, #772]	; (80021c8 <UART_SetConfig+0x37c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d005      	beq.n	8001ed4 <UART_SetConfig+0x88>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4abf      	ldr	r2, [pc, #764]	; (80021cc <UART_SetConfig+0x380>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	f040 80bd 	bne.w	800204e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ed4:	f7ff ff58 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8001ed8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	461d      	mov	r5, r3
 8001ede:	f04f 0600 	mov.w	r6, #0
 8001ee2:	46a8      	mov	r8, r5
 8001ee4:	46b1      	mov	r9, r6
 8001ee6:	eb18 0308 	adds.w	r3, r8, r8
 8001eea:	eb49 0409 	adc.w	r4, r9, r9
 8001eee:	4698      	mov	r8, r3
 8001ef0:	46a1      	mov	r9, r4
 8001ef2:	eb18 0805 	adds.w	r8, r8, r5
 8001ef6:	eb49 0906 	adc.w	r9, r9, r6
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f0e:	4688      	mov	r8, r1
 8001f10:	4691      	mov	r9, r2
 8001f12:	eb18 0005 	adds.w	r0, r8, r5
 8001f16:	eb49 0106 	adc.w	r1, r9, r6
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	461d      	mov	r5, r3
 8001f20:	f04f 0600 	mov.w	r6, #0
 8001f24:	196b      	adds	r3, r5, r5
 8001f26:	eb46 0406 	adc.w	r4, r6, r6
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4623      	mov	r3, r4
 8001f2e:	f7fe f953 	bl	80001d8 <__aeabi_uldivmod>
 8001f32:	4603      	mov	r3, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	461a      	mov	r2, r3
 8001f38:	4ba5      	ldr	r3, [pc, #660]	; (80021d0 <UART_SetConfig+0x384>)
 8001f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	461d      	mov	r5, r3
 8001f48:	f04f 0600 	mov.w	r6, #0
 8001f4c:	46a9      	mov	r9, r5
 8001f4e:	46b2      	mov	sl, r6
 8001f50:	eb19 0309 	adds.w	r3, r9, r9
 8001f54:	eb4a 040a 	adc.w	r4, sl, sl
 8001f58:	4699      	mov	r9, r3
 8001f5a:	46a2      	mov	sl, r4
 8001f5c:	eb19 0905 	adds.w	r9, r9, r5
 8001f60:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f78:	4689      	mov	r9, r1
 8001f7a:	4692      	mov	sl, r2
 8001f7c:	eb19 0005 	adds.w	r0, r9, r5
 8001f80:	eb4a 0106 	adc.w	r1, sl, r6
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	461d      	mov	r5, r3
 8001f8a:	f04f 0600 	mov.w	r6, #0
 8001f8e:	196b      	adds	r3, r5, r5
 8001f90:	eb46 0406 	adc.w	r4, r6, r6
 8001f94:	461a      	mov	r2, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	f7fe f91e 	bl	80001d8 <__aeabi_uldivmod>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <UART_SetConfig+0x384>)
 8001fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	2164      	movs	r1, #100	; 0x64
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	3332      	adds	r3, #50	; 0x32
 8001fb6:	4a86      	ldr	r2, [pc, #536]	; (80021d0 <UART_SetConfig+0x384>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fc4:	4498      	add	r8, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	461d      	mov	r5, r3
 8001fca:	f04f 0600 	mov.w	r6, #0
 8001fce:	46a9      	mov	r9, r5
 8001fd0:	46b2      	mov	sl, r6
 8001fd2:	eb19 0309 	adds.w	r3, r9, r9
 8001fd6:	eb4a 040a 	adc.w	r4, sl, sl
 8001fda:	4699      	mov	r9, r3
 8001fdc:	46a2      	mov	sl, r4
 8001fde:	eb19 0905 	adds.w	r9, r9, r5
 8001fe2:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ff2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ff6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ffa:	4689      	mov	r9, r1
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	eb19 0005 	adds.w	r0, r9, r5
 8002002:	eb4a 0106 	adc.w	r1, sl, r6
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	461d      	mov	r5, r3
 800200c:	f04f 0600 	mov.w	r6, #0
 8002010:	196b      	adds	r3, r5, r5
 8002012:	eb46 0406 	adc.w	r4, r6, r6
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	f7fe f8dd 	bl	80001d8 <__aeabi_uldivmod>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	461a      	mov	r2, r3
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <UART_SetConfig+0x384>)
 8002026:	fba3 1302 	umull	r1, r3, r3, r2
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2164      	movs	r1, #100	; 0x64
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	3332      	adds	r3, #50	; 0x32
 8002038:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <UART_SetConfig+0x384>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	f003 0207 	and.w	r2, r3, #7
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4442      	add	r2, r8
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e26f      	b.n	800252e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800204e:	f7ff fe87 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002052:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	461d      	mov	r5, r3
 8002058:	f04f 0600 	mov.w	r6, #0
 800205c:	46a8      	mov	r8, r5
 800205e:	46b1      	mov	r9, r6
 8002060:	eb18 0308 	adds.w	r3, r8, r8
 8002064:	eb49 0409 	adc.w	r4, r9, r9
 8002068:	4698      	mov	r8, r3
 800206a:	46a1      	mov	r9, r4
 800206c:	eb18 0805 	adds.w	r8, r8, r5
 8002070:	eb49 0906 	adc.w	r9, r9, r6
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002080:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002084:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002088:	4688      	mov	r8, r1
 800208a:	4691      	mov	r9, r2
 800208c:	eb18 0005 	adds.w	r0, r8, r5
 8002090:	eb49 0106 	adc.w	r1, r9, r6
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	461d      	mov	r5, r3
 800209a:	f04f 0600 	mov.w	r6, #0
 800209e:	196b      	adds	r3, r5, r5
 80020a0:	eb46 0406 	adc.w	r4, r6, r6
 80020a4:	461a      	mov	r2, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	f7fe f896 	bl	80001d8 <__aeabi_uldivmod>
 80020ac:	4603      	mov	r3, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <UART_SetConfig+0x384>)
 80020b4:	fba3 2302 	umull	r2, r3, r3, r2
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	461d      	mov	r5, r3
 80020c2:	f04f 0600 	mov.w	r6, #0
 80020c6:	46a9      	mov	r9, r5
 80020c8:	46b2      	mov	sl, r6
 80020ca:	eb19 0309 	adds.w	r3, r9, r9
 80020ce:	eb4a 040a 	adc.w	r4, sl, sl
 80020d2:	4699      	mov	r9, r3
 80020d4:	46a2      	mov	sl, r4
 80020d6:	eb19 0905 	adds.w	r9, r9, r5
 80020da:	eb4a 0a06 	adc.w	sl, sl, r6
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f2:	4689      	mov	r9, r1
 80020f4:	4692      	mov	sl, r2
 80020f6:	eb19 0005 	adds.w	r0, r9, r5
 80020fa:	eb4a 0106 	adc.w	r1, sl, r6
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	461d      	mov	r5, r3
 8002104:	f04f 0600 	mov.w	r6, #0
 8002108:	196b      	adds	r3, r5, r5
 800210a:	eb46 0406 	adc.w	r4, r6, r6
 800210e:	461a      	mov	r2, r3
 8002110:	4623      	mov	r3, r4
 8002112:	f7fe f861 	bl	80001d8 <__aeabi_uldivmod>
 8002116:	4603      	mov	r3, r0
 8002118:	460c      	mov	r4, r1
 800211a:	461a      	mov	r2, r3
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <UART_SetConfig+0x384>)
 800211e:	fba3 1302 	umull	r1, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2164      	movs	r1, #100	; 0x64
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	3332      	adds	r3, #50	; 0x32
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <UART_SetConfig+0x384>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800213e:	4498      	add	r8, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	461d      	mov	r5, r3
 8002144:	f04f 0600 	mov.w	r6, #0
 8002148:	46a9      	mov	r9, r5
 800214a:	46b2      	mov	sl, r6
 800214c:	eb19 0309 	adds.w	r3, r9, r9
 8002150:	eb4a 040a 	adc.w	r4, sl, sl
 8002154:	4699      	mov	r9, r3
 8002156:	46a2      	mov	sl, r4
 8002158:	eb19 0905 	adds.w	r9, r9, r5
 800215c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002170:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002174:	4689      	mov	r9, r1
 8002176:	4692      	mov	sl, r2
 8002178:	eb19 0005 	adds.w	r0, r9, r5
 800217c:	eb4a 0106 	adc.w	r1, sl, r6
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	461d      	mov	r5, r3
 8002186:	f04f 0600 	mov.w	r6, #0
 800218a:	196b      	adds	r3, r5, r5
 800218c:	eb46 0406 	adc.w	r4, r6, r6
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	f7fe f820 	bl	80001d8 <__aeabi_uldivmod>
 8002198:	4603      	mov	r3, r0
 800219a:	460c      	mov	r4, r1
 800219c:	461a      	mov	r2, r3
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <UART_SetConfig+0x384>)
 80021a0:	fba3 1302 	umull	r1, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	2164      	movs	r1, #100	; 0x64
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <UART_SetConfig+0x384>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4442      	add	r2, r8
 80021c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80021c6:	e1b2      	b.n	800252e <UART_SetConfig+0x6e2>
 80021c8:	40011000 	.word	0x40011000
 80021cc:	40011400 	.word	0x40011400
 80021d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4ad7      	ldr	r2, [pc, #860]	; (8002538 <UART_SetConfig+0x6ec>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d005      	beq.n	80021ea <UART_SetConfig+0x39e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4ad6      	ldr	r2, [pc, #856]	; (800253c <UART_SetConfig+0x6f0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	f040 80d1 	bne.w	800238c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021ea:	f7ff fdcd 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 80021ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	469a      	mov	sl, r3
 80021f4:	f04f 0b00 	mov.w	fp, #0
 80021f8:	46d0      	mov	r8, sl
 80021fa:	46d9      	mov	r9, fp
 80021fc:	eb18 0308 	adds.w	r3, r8, r8
 8002200:	eb49 0409 	adc.w	r4, r9, r9
 8002204:	4698      	mov	r8, r3
 8002206:	46a1      	mov	r9, r4
 8002208:	eb18 080a 	adds.w	r8, r8, sl
 800220c:	eb49 090b 	adc.w	r9, r9, fp
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800221c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002220:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002224:	4688      	mov	r8, r1
 8002226:	4691      	mov	r9, r2
 8002228:	eb1a 0508 	adds.w	r5, sl, r8
 800222c:	eb4b 0609 	adc.w	r6, fp, r9
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	0094      	lsls	r4, r2, #2
 8002244:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002248:	008b      	lsls	r3, r1, #2
 800224a:	461a      	mov	r2, r3
 800224c:	4623      	mov	r3, r4
 800224e:	4628      	mov	r0, r5
 8002250:	4631      	mov	r1, r6
 8002252:	f7fd ffc1 	bl	80001d8 <__aeabi_uldivmod>
 8002256:	4603      	mov	r3, r0
 8002258:	460c      	mov	r4, r1
 800225a:	461a      	mov	r2, r3
 800225c:	4bb8      	ldr	r3, [pc, #736]	; (8002540 <UART_SetConfig+0x6f4>)
 800225e:	fba3 2302 	umull	r2, r3, r3, r2
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	469b      	mov	fp, r3
 800226c:	f04f 0c00 	mov.w	ip, #0
 8002270:	46d9      	mov	r9, fp
 8002272:	46e2      	mov	sl, ip
 8002274:	eb19 0309 	adds.w	r3, r9, r9
 8002278:	eb4a 040a 	adc.w	r4, sl, sl
 800227c:	4699      	mov	r9, r3
 800227e:	46a2      	mov	sl, r4
 8002280:	eb19 090b 	adds.w	r9, r9, fp
 8002284:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002294:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002298:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800229c:	4689      	mov	r9, r1
 800229e:	4692      	mov	sl, r2
 80022a0:	eb1b 0509 	adds.w	r5, fp, r9
 80022a4:	eb4c 060a 	adc.w	r6, ip, sl
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f04f 0400 	mov.w	r4, #0
 80022ba:	0094      	lsls	r4, r2, #2
 80022bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022c0:	008b      	lsls	r3, r1, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	4623      	mov	r3, r4
 80022c6:	4628      	mov	r0, r5
 80022c8:	4631      	mov	r1, r6
 80022ca:	f7fd ff85 	bl	80001d8 <__aeabi_uldivmod>
 80022ce:	4603      	mov	r3, r0
 80022d0:	460c      	mov	r4, r1
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b9a      	ldr	r3, [pc, #616]	; (8002540 <UART_SetConfig+0x6f4>)
 80022d6:	fba3 1302 	umull	r1, r3, r3, r2
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2164      	movs	r1, #100	; 0x64
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	3332      	adds	r3, #50	; 0x32
 80022e8:	4a95      	ldr	r2, [pc, #596]	; (8002540 <UART_SetConfig+0x6f4>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f4:	4498      	add	r8, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	469b      	mov	fp, r3
 80022fa:	f04f 0c00 	mov.w	ip, #0
 80022fe:	46d9      	mov	r9, fp
 8002300:	46e2      	mov	sl, ip
 8002302:	eb19 0309 	adds.w	r3, r9, r9
 8002306:	eb4a 040a 	adc.w	r4, sl, sl
 800230a:	4699      	mov	r9, r3
 800230c:	46a2      	mov	sl, r4
 800230e:	eb19 090b 	adds.w	r9, r9, fp
 8002312:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002322:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800232a:	4689      	mov	r9, r1
 800232c:	4692      	mov	sl, r2
 800232e:	eb1b 0509 	adds.w	r5, fp, r9
 8002332:	eb4c 060a 	adc.w	r6, ip, sl
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	f04f 0400 	mov.w	r4, #0
 8002348:	0094      	lsls	r4, r2, #2
 800234a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800234e:	008b      	lsls	r3, r1, #2
 8002350:	461a      	mov	r2, r3
 8002352:	4623      	mov	r3, r4
 8002354:	4628      	mov	r0, r5
 8002356:	4631      	mov	r1, r6
 8002358:	f7fd ff3e 	bl	80001d8 <__aeabi_uldivmod>
 800235c:	4603      	mov	r3, r0
 800235e:	460c      	mov	r4, r1
 8002360:	461a      	mov	r2, r3
 8002362:	4b77      	ldr	r3, [pc, #476]	; (8002540 <UART_SetConfig+0x6f4>)
 8002364:	fba3 1302 	umull	r1, r3, r3, r2
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	2164      	movs	r1, #100	; 0x64
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	3332      	adds	r3, #50	; 0x32
 8002376:	4a72      	ldr	r2, [pc, #456]	; (8002540 <UART_SetConfig+0x6f4>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4442      	add	r2, r8
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	e0d0      	b.n	800252e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800238c:	f7ff fce8 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002390:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	469a      	mov	sl, r3
 8002396:	f04f 0b00 	mov.w	fp, #0
 800239a:	46d0      	mov	r8, sl
 800239c:	46d9      	mov	r9, fp
 800239e:	eb18 0308 	adds.w	r3, r8, r8
 80023a2:	eb49 0409 	adc.w	r4, r9, r9
 80023a6:	4698      	mov	r8, r3
 80023a8:	46a1      	mov	r9, r4
 80023aa:	eb18 080a 	adds.w	r8, r8, sl
 80023ae:	eb49 090b 	adc.w	r9, r9, fp
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023c6:	4688      	mov	r8, r1
 80023c8:	4691      	mov	r9, r2
 80023ca:	eb1a 0508 	adds.w	r5, sl, r8
 80023ce:	eb4b 0609 	adc.w	r6, fp, r9
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	0094      	lsls	r4, r2, #2
 80023e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023ea:	008b      	lsls	r3, r1, #2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	4628      	mov	r0, r5
 80023f2:	4631      	mov	r1, r6
 80023f4:	f7fd fef0 	bl	80001d8 <__aeabi_uldivmod>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <UART_SetConfig+0x6f4>)
 8002400:	fba3 2302 	umull	r2, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	469b      	mov	fp, r3
 800240e:	f04f 0c00 	mov.w	ip, #0
 8002412:	46d9      	mov	r9, fp
 8002414:	46e2      	mov	sl, ip
 8002416:	eb19 0309 	adds.w	r3, r9, r9
 800241a:	eb4a 040a 	adc.w	r4, sl, sl
 800241e:	4699      	mov	r9, r3
 8002420:	46a2      	mov	sl, r4
 8002422:	eb19 090b 	adds.w	r9, r9, fp
 8002426:	eb4a 0a0c 	adc.w	sl, sl, ip
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002436:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800243a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800243e:	4689      	mov	r9, r1
 8002440:	4692      	mov	sl, r2
 8002442:	eb1b 0509 	adds.w	r5, fp, r9
 8002446:	eb4c 060a 	adc.w	r6, ip, sl
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4619      	mov	r1, r3
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	f04f 0400 	mov.w	r4, #0
 800245c:	0094      	lsls	r4, r2, #2
 800245e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002462:	008b      	lsls	r3, r1, #2
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	4628      	mov	r0, r5
 800246a:	4631      	mov	r1, r6
 800246c:	f7fd feb4 	bl	80001d8 <__aeabi_uldivmod>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	461a      	mov	r2, r3
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <UART_SetConfig+0x6f4>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	; 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <UART_SetConfig+0x6f4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002496:	4498      	add	r8, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	469b      	mov	fp, r3
 800249c:	f04f 0c00 	mov.w	ip, #0
 80024a0:	46d9      	mov	r9, fp
 80024a2:	46e2      	mov	sl, ip
 80024a4:	eb19 0309 	adds.w	r3, r9, r9
 80024a8:	eb4a 040a 	adc.w	r4, sl, sl
 80024ac:	4699      	mov	r9, r3
 80024ae:	46a2      	mov	sl, r4
 80024b0:	eb19 090b 	adds.w	r9, r9, fp
 80024b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024cc:	4689      	mov	r9, r1
 80024ce:	4692      	mov	sl, r2
 80024d0:	eb1b 0509 	adds.w	r5, fp, r9
 80024d4:	eb4c 060a 	adc.w	r6, ip, sl
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f04f 0400 	mov.w	r4, #0
 80024ea:	0094      	lsls	r4, r2, #2
 80024ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024f0:	008b      	lsls	r3, r1, #2
 80024f2:	461a      	mov	r2, r3
 80024f4:	4623      	mov	r3, r4
 80024f6:	4628      	mov	r0, r5
 80024f8:	4631      	mov	r1, r6
 80024fa:	f7fd fe6d 	bl	80001d8 <__aeabi_uldivmod>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	461a      	mov	r2, r3
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <UART_SetConfig+0x6f4>)
 8002506:	fba3 1302 	umull	r1, r3, r3, r2
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2164      	movs	r1, #100	; 0x64
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	3332      	adds	r3, #50	; 0x32
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <UART_SetConfig+0x6f4>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4442      	add	r2, r8
 800252a:	609a      	str	r2, [r3, #8]
}
 800252c:	e7ff      	b.n	800252e <UART_SetConfig+0x6e2>
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002538:	40011000 	.word	0x40011000
 800253c:	40011400 	.word	0x40011400
 8002540:	51eb851f 	.word	0x51eb851f

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4e0d      	ldr	r6, [pc, #52]	; (800257c <__libc_init_array+0x38>)
 8002548:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254a:	1ba4      	subs	r4, r4, r6
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	2500      	movs	r5, #0
 8002550:	42a5      	cmp	r5, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	4e0b      	ldr	r6, [pc, #44]	; (8002584 <__libc_init_array+0x40>)
 8002556:	4c0c      	ldr	r4, [pc, #48]	; (8002588 <__libc_init_array+0x44>)
 8002558:	f000 f820 	bl	800259c <_init>
 800255c:	1ba4      	subs	r4, r4, r6
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	2500      	movs	r5, #0
 8002562:	42a5      	cmp	r5, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800256c:	4798      	blx	r3
 800256e:	3501      	adds	r5, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002576:	4798      	blx	r3
 8002578:	3501      	adds	r5, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080025d4 	.word	0x080025d4
 8002580:	080025d4 	.word	0x080025d4
 8002584:	080025d4 	.word	0x080025d4
 8002588:	080025d8 	.word	0x080025d8

0800258c <memset>:
 800258c:	4402      	add	r2, r0
 800258e:	4603      	mov	r3, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
